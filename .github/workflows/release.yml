name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python3 -m pip install --upgrade pip build twine
          python3 -m pip install pex shiv pyinstaller

      - name: Build sdist and wheel
        run: |
          python3 -m build --sdist --wheel

      - name: Build single-file artifacts (PEX, shiv, PyInstaller)
        run: |
          make build-pex
          make build-shiv

      - name: Ensure launcher is executable
        run: chmod +x tools/sync-tools-launcher.sh || true

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            tools/sync-tools-launcher.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pyinstaller-matrix:
    name: Build PyInstaller binaries (Linux/macOS/Windows)
    needs: build-and-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: sync-tools-linux-x86_64
            ext: ""
            arch: x64
          - os: macos-13
            artifact_name: sync-tools-macos-x86_64
            ext: ""
            arch: x64
          - os: macos-14
            artifact_name: sync-tools-macos-arm64
            ext: ""
            arch: arm64
          - os: windows-latest
            artifact_name: sync-tools-windows-x86_64
            ext: ".exe"
            arch: x64
          - os: windows-latest
            artifact_name: sync-tools-windows-arm64
            ext: ".exe"
            arch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          architecture: ${{ matrix.arch }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip build pyinstaller

      - name: Build wheel
        run: |
          python -m build --wheel

      - name: Locate wheel path
        run: |
          python - <<'PY'
          import glob, os
          wheels = sorted(glob.glob('dist/*.whl'))
          assert wheels, 'No wheel built in dist/'
          w = wheels[0]
          print('WHEEL', w)
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f"WHEEL={w}\n")
          PY

      - name: Install our wheel (runtime deps only)
        run: |
          python - <<'PY'
          import os, sys, subprocess
          wheel = os.environ['WHEEL']
          subprocess.check_call([sys.executable, '-m', 'pip', 'install', wheel])
          PY

      - name: Create PyInstaller entry script
        run: |
          python - <<'PY'
          open('run_sync_tools.py','w').write('from sync_tools import main\nif __name__ == "__main__":\n    main()\n')
          PY

      - name: Build PyInstaller binary
        run: |
          python -m PyInstaller --onefile --name "${{ matrix.artifact_name }}" --distpath dist --workpath build --specpath build run_sync_tools.py

      - name: Upload binary to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/${{ matrix.artifact_name }}${{ matrix.ext }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact for CI debugging (optional)
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Verify version matches tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          PKG_VER=$(python3 -c "import tomllib,sys; print(tomllib.loads(open('pyproject.toml','rb').read())['project']['version'])")
          echo "tag=$TAG pkg=$PKG_VER"
          if [ "v$PKG_VER" != "$TAG" ]; then
            echo "Tag and package version mismatch" >&2
            exit 1
          fi
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Publish to Test PyPI (optional)
        if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
        run: |
          python3 -m pip install --upgrade twine
          if [ -n "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
            python3 -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p "${{ secrets.TEST_PYPI_API_TOKEN }}" dist/* || true
          else
            echo "TEST_PYPI_API_TOKEN not configured, skipping Test PyPI publish"
          fi

      - name: Publish to PyPI (via pypa action)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
